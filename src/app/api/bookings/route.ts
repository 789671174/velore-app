import { NextResponse } from "next/server"; import { prisma } from "@/app/lib/prisma"; import { sendMail } from "@/app/lib/mailer"; export async function GET(request:Request){const {searchParams}=new URL(request.url); const date=searchParams.get("date"); const status=searchParams.get("status"); const where:any={}; if(date) where.date=date; if(status) where.status=status; const data=await prisma.booking.findMany({where,orderBy:[{date:"asc"},{time:"asc"}]}); return NextResponse.json(data);} export async function POST(request:Request){const body=await request.json() as {firstName:string;lastName:string;email:string;phone?:string;date:string;time:string}; if(!body.firstName||!body.lastName||!body.email||!body.date||!body.time){return NextResponse.json({error:"missing fields"},{status:400});} const created=await prisma.booking.create({data:{...body,status:"pending"}}); const site=process.env.NEXT_PUBLIC_SITE_URL||""; await sendMail({to:body.email,subject:"Termin-Anfrage erhalten",html:`<p>Hallo ${body.firstName},</p><p>Wir haben deine Anfrage für ${body.date} ${body.time} erhalten. Wir melden uns asap.</p><p>Deine Anfrage-ID: <b>${created.id}</b></p>${site?`<p><a href="${site}/client">Zur Kundenseite</a></p>`:""}`}); const admin=process.env.MAIL_TO_ADMIN||""; if(admin){await sendMail({to:admin,subject:"Neue Termin-Anfrage",html:`<p>Neue Anfrage: ${body.date} ${body.time} – ${body.firstName} ${body.lastName} (${body.email})</p>`});} return NextResponse.json(created,{status:201}); } export async function PATCH(request:Request){const {searchParams}=new URL(request.url); const id=searchParams.get("id"); if(!id) return NextResponse.json({error:"id required"},{status:400}); const body=await request.json() as {status?:"pending"|"accepted"|"declined"}; const updated=await prisma.booking.update({where:{id},data:{status:body.status}}); return NextResponse.json(updated);}